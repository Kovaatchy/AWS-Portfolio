Parameters:
  dbUser:
    NoEcho: 'true'
    Description: The database admin account user
    Type: String
  dbPassword:
    NoEcho: 'true'
    Description: The database admin account password
    Type: String

Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
       - Key: stack
         Value: production
  publicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: "us-east-1a"
      MapPublicIpOnLaunch: 'true'
      Tags:
      - Key: stack
        Value: production
  publicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: "us-east-1b"
      MapPublicIpOnLaunch: 'true'
      Tags:
      - Key: stack
        Value: production
  privateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: "us-east-1a"
      Tags:
      - Key: stack
        Value: production
  privateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: "us-east-1b"
      Tags:
      - Key: stack
        Value: production
  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: stack
        Value: production 
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref myInternetGateway
      VpcId: !Ref myVPC
  myInternetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
      - Key: stack
        Value: production
  myPublicRoute:
    Type: AWS::EC2::Route
    Properties:
       RouteTableId: !Ref myInternetRouteTable
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId: !Ref myInternetGateway
  publicSubnetRouteAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myInternetRouteTable
      SubnetId: !Ref publicSubnet1
  publicSubnetRouteAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myInternetRouteTable
      SubnetId: !Ref publicSubnet2
  ec2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ec2SecurityGroup
      GroupName: ec2SecurityGroup
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: "-1"
      Tags: 
      - Key: stack
        Value: production
  rdsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: ec2SecurityGroup
    Properties:
      GroupDescription: rdsSecurityGroup
      GroupName: rdsSecurityGroup
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref ec2SecurityGroup
      Tags: 
      - Key: stack
        Value: production
  myDBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup" 
    Properties: 
      DBSubnetGroupDescription: db-subnet-group-rds
      SubnetIds: 
        - !Ref privateSubnet1
        - !Ref privateSubnet2
      Tags: 
      - Key: stack
        Value: production
  RDSDBInstance:
    Type: 'AWS::RDS::DBInstance'
    DependsOn: rdsSecurityGroup
    Properties:
      AllocatedStorage: '20'
      BackupRetentionPeriod: 0
      DBInstanceClass: db.t3.micro
      Engine: mariadb
      MasterUserPassword: !Ref dbPassword
      MasterUsername: !Ref dbUser
      DBSubnetGroupName: !Ref myDBSubnetGroup
      VPCSecurityGroups: 
        - !Ref rdsSecurityGroup
